// Check and install required dependencies
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Function to check if a package is installed
function isPackageInstalled(packageName) {
    try {
        require.resolve(packageName);
        return true;
    } catch (e) {
        return false;
    }
}

// Function to install missing packages
function installMissingPackages() {
    console.log('üîç Checking for required packages...');
    
    const requiredPackages = ['ws', 'nodemailer', 'mysql2'];
    const missingPackages = [];
    
    for (const pkg of requiredPackages) {
        if (!isPackageInstalled(pkg)) {
            missingPackages.push(pkg);
        }
    }
    
    if (missingPackages.length > 0) {
        console.log(`üì¶ Installing missing packages: ${missingPackages.join(', ')}`);
        try {
            execSync(`npm install ${missingPackages.join(' ')}`, { stdio: 'inherit' });
            console.log('‚úÖ All required packages installed successfully');
        } catch (error) {
            console.error('‚ùå Error installing packages:', error.message);
            console.log('Please run manually: npm install ws nodemailer mysql2');
            process.exit(1);
        }
    } else {
        console.log('‚úÖ All required packages are already installed');
    }
}

// Check if package.json exists, if not create it
function ensurePackageJson() {
    const packageJsonPath = path.join(__dirname, 'package.json');
    
    if (!fs.existsSync(packageJsonPath)) {
        console.log('üìÑ Creating package.json file...');
        
        const packageJson = {
            "name": "websocket-server",
            "version": "1.0.0",
            "description": "WebSocket server for chat and notifications",
            "main": "websocket-server1.js",
            "dependencies": {
                "ws": "^8.13.0",
                "nodemailer": "^6.9.3",
                "mysql2": "^3.4.0"
            },
            "scripts": {
                "start": "node websocket-server1.js"
            }
        };
        
        try {
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
            console.log('‚úÖ package.json created successfully');
        } catch (error) {
            console.error('‚ùå Error creating package.json:', error.message);
        }
    }
}

// Run initialization
ensurePackageJson();
installMissingPackages();

const WebSocket = require('ws');
const nodemailer = require('nodemailer');

let mysql = null;
try {
    mysql = require('mysql2/promise');
} catch (error) {
    console.log('MySQL module not available. Email fetching from database will be disabled.');
}
const wss = new WebSocket.Server({ port: 8080 });

// Email configuration handleAuthentication
const transporter = nodemailer.createTransport({
    host: 'smtp.mail.ru',
    port: 465,
    secure: true, // –∏—Å–ø–æ–ª—å–∑—É–µ–º SSL
    auth: {
        user: 'sdghhhkhgfxfzdewfrty@mail.ru',
        pass: 'uAcE5sRpGvCyMqZ1bDn3' // –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Mail.ru (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
transporter.verify(function(error, success) {
    if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP-—Å–µ—Ä–≤–µ—Ä—É Mail.ru:', error);
    } else {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º Mail.ru —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }
});

// Database connection configuration
const dbConfig = {
    host: 'localhost',
    user: 'root',      // replace with your database username
    password: 'p-329472_altnchat',      // replace with your database password
    database: 'socialite' // replace with your database name
};

// Create database connection pool if MySQL is available
let pool = null;
if (mysql) {
    try {
        pool = mysql.createPool(dbConfig);
        console.log('MySQL connection pool created successfully');
    } catch (error) {
        console.error('Error creating MySQL connection pool:', error);
    }
}

// Function to get user email from database
async function getUserEmailFromDB(userId) {
    if (!pool) {
        console.log('Cannot get email from database: MySQL connection pool not available');
        return null;
    }
    
    try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT email FROM users WHERE id = ?', [userId]);
        connection.release();
        
        if (rows.length > 0) {
            console.log(`Retrieved email for user ${userId} from database: ${rows[0].email}`);
            return rows[0].email;
        } else {
            console.log(`No email found in database for user ${userId}`);
            return null;
        }
    } catch (error) {
        console.error(`Error retrieving email for user ${userId} from database:`, error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
async function getUserNameById(userId) {
    try {
        if (!pool) {
            console.error('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return null;
        }
        
        const connection = await pool.getConnection();
        try {
            const [rows] = await connection.execute(
                'SELECT CONCAT(firstname, " ", lastname) as fullname FROM users WHERE id = ?',
                [userId]
            );
            
            connection.release();
            
            if (rows.length > 0) {
                return rows[0].fullname;
            }
            return null;
        } catch (error) {
            connection.release();
            throw error;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// Email sending function
function sendEmailNotification(recipient, subject, message) {
    // Skip if no recipient
    if (!recipient) {
        console.log('Cannot send email: No recipient specified');
        return Promise.reject(new Error('No recipient specified'));
    }

    const mailOptions = {
        from: {
            name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞',
            address: 'sdghhhkhgfxfzdewfrty@mail.ru'
        },
        to: recipient,
        subject: subject,
        html: message
    };

    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ ${recipient} —Å —Ç–µ–º–æ–π "${subject}"`);

    return new Promise((resolve, reject) => {
        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
                reject(error);
            } else {
                console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.response);
                resolve(info);
            }
        });
    });
}

const clients = new Map(); // userId -> ws
const userStatuses = new Map(); // userId -> isOnline
const userEmails = new Map(); // userId -> email

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
wss.on('connection', function connection(ws) {
    console.log('üîÑ New WebSocket connection established');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (!global.clients) {
        global.clients = new Map();
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    ws.on('message', function incoming(message) {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç JavaScript, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            let messageData;
            
            if (typeof message === 'string') {
                messageData = JSON.parse(message);
            } else {
                // –ï—Å–ª–∏ message –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
                try {
                    const messageString = message.toString();
                    messageData = JSON.parse(messageString);
                } catch (parseError) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç:', parseError);
                    return;
                }
            }
            
            console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageData.type || 'unknown type');
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (messageData.type === 'auth') {
                const userId = messageData.user_id;
                if (userId) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    clients.set(userId.toString(), ws);
                    ws.userId = userId.toString();
                    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${clients.size}`);
                    
                    // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–Ω–ª–∞–π–Ω
                    userStatuses.set(userId.toString(), true);
                    broadcastStatus(userId.toString(), true);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ Jitsi
            else if (messageData.type === 'jitsi_video_call' || messageData.type === 'jitsi_audio_call') {
                const recipientId = messageData.recipient_id.toString();
                const recipientWs = clients.get(recipientId);
                
                console.log(`üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ ${messageData.type === 'jitsi_video_call' ? '–≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫'} –æ—Ç ${messageData.sender_id} –∫ ${recipientId}`);
                
                if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                    recipientWs.send(JSON.stringify(messageData));
                    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
                } else {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏
                    const senderWs = clients.get(messageData.sender_id.toString());
                    if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                        senderWs.send(JSON.stringify({
                            type: 'call_error',
                            error: 'recipient_offline',
                            message: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏',
                            timestamp: new Date().toISOString()
                        }));
                    }
                    console.log(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ`);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
            else if (messageData.type === 'call_declined' || messageData.type === 'call_missed') {
                const recipientId = messageData.recipient_id.toString();
                const recipientWs = clients.get(recipientId);
                
                console.log(`üìû ${messageData.type === 'call_declined' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ' : '–ü—Ä–æ–ø—É—Å–∫'} –∑–≤–æ–Ω–∫–∞ –æ—Ç ${messageData.sender_id} –∫ ${recipientId}`);
                
                if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
                    recipientWs.send(JSON.stringify(messageData));
                    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${messageData.type === 'call_declined' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏' : '–ø—Ä–æ–ø—É—Å–∫–µ'} –∑–≤–æ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
                }
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WebSocket –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            else {
                messageData.ws = ws;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                handleMessage(messageData);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    ws.on('error', function(error) {
        console.error('‚ùå WebSocket error:', error);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('close', function() {
        console.log('‚ùå WebSocket connection closed');
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (ws.userId) {
            console.log(`üë§ User ${ws.userId} disconnected`);
            
            // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω
            userStatuses.set(ws.userId, false);
            broadcastStatus(ws.userId, false);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            if (clients.has(ws.userId)) {
                clients.delete(ws.userId);
            }
            if (global.clients.has(ws.userId)) {
                global.clients.delete(ws.userId);
            }
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è ping/pong
    ws.isAlive = true;
    ws.on('pong', heartbeat);
});

function broadcastStatus(userId, isOnline) {
    if (!userId || typeof isOnline !== 'boolean') {
        console.error('Invalid status update parameters:', { userId, isOnline });
        return;
    }

    console.log('Broadcasting status update:', {
        userId,
        isOnline,
        timestamp: new Date().toISOString()
    });

    const message = {
        type: 'status_update',
        userId: parseInt(userId),
        isOnline: isOnline
    };

    let successCount = 0;
    let failCount = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
    const uniqueClients = new Map(clients);

    uniqueClients.forEach((clientWs, clientId) => {
        if (clientWs && clientWs.readyState === WebSocket.OPEN) {
            try {
                clientWs.send(JSON.stringify(message));
                successCount++;
                console.log(`Status update sent to client ${clientId}:`, {
                    recipientId: clientId,
                    messageType: 'status_update',
                    success: true
                });
            } catch (error) {
                failCount++;
                console.error(`Error sending status to client ${clientId}:`, error);
            }
        } else {
            failCount++;
            console.log(`Failed to send status to client ${clientId} - connection not open`);
            // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            clients.delete(clientId);
        }
    });

    console.log('Status broadcast complete:', {
        userId,
        isOnline,
        successCount,
        failCount,
        totalClients: clients.size
    });
}

console.log('üöÄ WebSocket server running on port 8080');

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
setInterval(() => {
    console.log('üìä Server status:', {
        timestamp: new Date().toISOString(),
        connectedClients: clients.size,
        onlineUsers: Array.from(userStatuses.entries())
            .filter(([_, status]) => status).length,
        totalTrackedUsers: userStatuses.size
    });
}, 30000);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    const now = Date.now();
    clients.forEach((ws, userId) => {
        if (!ws || ws.readyState !== WebSocket.OPEN) {
            console.log('üîç Found stale connection for user:', userId);
            userStatuses.set(userId, false);
            broadcastStatus(userId, false);
            clients.delete(userId);
        }
    });

    console.log('üìä Active connections check:', {
        timestamp: new Date().toISOString(),
        connectedClients: clients.size,
        onlineUsers: Array.from(userStatuses.entries()).filter(([_, status]) => status).length
    });
}, 30000);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
setInterval(async () => {
    console.log('üìß Checking for missing emails...');
    const usersWithoutEmail = [];
    
    for (const [userId, ws] of clients.entries()) {
        if (ws && ws.readyState === WebSocket.OPEN && !userEmails.has(userId)) {
            usersWithoutEmail.push(userId);
        }
    }
    
    if (usersWithoutEmail.length > 0) {
        console.log(`Found ${usersWithoutEmail.length} users without email, trying to fetch from database...`);
        
        for (const userId of usersWithoutEmail) {
            try {
                const email = await getUserEmailFromDB(userId);
                if (email) {
                    userEmails.set(userId, email);
                    console.log(`‚úÖ Added email for user ${userId}: ${email}`);
                }
            } catch (error) {
                console.error(`‚ùå Error fetching email for user ${userId}:`, error);
            }
        }
    } else {
        console.log('All active users have emails stored.');
    }
}, 60000); // Check every minute

// –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
function heartbeat() {
    this.isAlive = true;
}

const interval = setInterval(function ping() {
    wss.clients.forEach(function each(ws) {
        if (ws.isAlive === false) {
            if (ws.userId) {
                userStatuses.set(ws.userId, false);
                broadcastStatus(ws.userId, false);
            }
            return ws.terminate();
        }

        ws.isAlive = false;
        ws.ping();
    });
}, 30000);

wss.on('close', function close() {
    clearInterval(interval);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫
function handleAudioCallRequest(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫:', data);
    
    const recipientId = parseInt(data.recipientId);
    const senderId = parseInt(data.senderId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const recipientWs = clients.get(recipientId);
        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            const message = JSON.stringify({
                type: 'audio_call_request',
                senderId: senderId,
                senderName: data.senderName
            });
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            recipientWs.send(message);
            console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        } else {
            console.log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${recipientId} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é`);
            if (clients.has(senderId)) {
                clients.get(senderId).send(JSON.stringify({
                    type: 'audio_call_error',
                    error: 'recipient_unavailable',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }));
            }
        }
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏
        if (clients.has(senderId)) {
            clients.get(senderId).send(JSON.stringify({
                type: 'audio_call_error',
                error: 'recipient_offline',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏'
            }));
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleVideoCallAccepted(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
    
    const recipientId = data.recipientId;
    const senderId = data.senderId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        clients.get(recipientId).send(JSON.stringify({
            type: 'video_call_accepted',
            senderId: senderId
        }));
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleVideoCallRejected(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
    
    const recipientId = data.recipientId;
    const senderId = data.senderId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        clients.get(recipientId).send(JSON.stringify({
            type: 'video_call_rejected',
            senderId: senderId
        }));
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleVideoCallEnd(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
    
    const recipientId = data.recipientId;
    const senderId = data.senderId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        clients.get(recipientId).send(JSON.stringify({
            type: 'video_call_end',
            senderId: senderId
        }));
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleVideoCallOffer(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
    
    const recipientId = data.recipientId;
    const senderId = data.senderId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        clients.get(recipientId).send(JSON.stringify({
            type: 'video_call_offer',
            senderId: senderId,
            sdp: data.sdp
        }));
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleVideoCallAnswer(data) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
    
    const recipientId = data.recipientId;
    const senderId = data.senderId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if (clients.has(recipientId)) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç SDP –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        clients.get(recipientId).send(JSON.stringify({
            type: 'video_call_answer',
            senderId: senderId,
            sdp: data.sdp
        }));
    } else {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function checkTodayEvents() {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if (!pool) {
        console.error('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        const today = new Date().toISOString().split('T')[0];
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
        const connection = await pool.getConnection();
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã event_notification_log
            const [tables] = await connection.query(`
                SELECT TABLE_NAME FROM information_schema.tables 
                WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?
            `, [dbConfig.database, 'event_notification_log']);
            
            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
            if (tables.length === 0) {
                console.log('–¢–∞–±–ª–∏—Ü–∞ event_notification_log –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...');
                await connection.query(`
                    CREATE TABLE event_notification_log (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        event_id INT NOT NULL,
                        user_id INT NOT NULL,
                        days_before INT NOT NULL DEFAULT 0,
                        sent_at DATETIME NOT NULL,
                        success TINYINT(1) NOT NULL DEFAULT 0,
                        INDEX (event_id),
                        INDEX (user_id),
                        INDEX (days_before),
                        INDEX (sent_at)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
                `);
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ event_notification_log —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
            }
            
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∏—Ö
            const [events] = await connection.execute(`
                SELECT e.id, e.title, e.location, e.description, 
                       u.id as user_id, u.username, u.email 
                FROM events e
                JOIN event_participants ep ON e.id = ep.event_id
                JOIN users u ON ep.user_id = u.id
                WHERE DATE(e.event_date) = ? AND e.status = 'active' AND e.is_active = 1
            `, [today]);
            
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${events.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è`);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            if (events.length > 0) {
                // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å–æ–±—ã—Ç–∏—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                const notifications = {};
                
                events.forEach(row => {
                    const key = `${row.user_id}_${row.id}`;
                    if (!notifications[key]) {
                        notifications[key] = {
                            email: row.email,
                            username: row.username,
                            userId: row.user_id,
                            eventId: row.id,
                            eventTitle: row.title,
                            eventLocation: row.location,
                            eventDescription: row.description
                        };
                    }
                });
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for (const key in notifications) {
                    const notification = notifications[key];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                    const [sentNotifications] = await connection.execute(`
                        SELECT id FROM event_notification_log 
                        WHERE event_id = ? 
                        AND user_id = ? 
                        AND days_before = 0
                        AND sent_at >= DATE(NOW())
                    `, [notification.eventId, notification.userId]);
                    
                    // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if (sentNotifications.length > 0) {
                        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${notification.eventId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.username} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`);
                        continue;
                    }
                    
                    const notificationSubject = `–°–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è: ${notification.eventTitle}`;
                    const notificationHtmlMessage = `
                        <h2>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ —Å–µ–≥–æ–¥–Ω—è</h2>
                        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${notification.username}!</p>
                        <p>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:</p>
                        <div style="margin: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">
                            <h3>${notification.eventTitle}</h3>
                            <p><strong>–ú–µ—Å—Ç–æ:</strong> ${notification.eventLocation}</p>
                            <p>${notification.eventDescription}</p>
                        </div>
                        <p>–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!</p>
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ —Å–∞–π—Ç–∞</p>
                    `;
                    
                    try {
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        await sendEmailNotification(notification.email, notificationSubject, notificationHtmlMessage);
                        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.username} (${notification.email}) –æ —Å–æ–±—ã—Ç–∏–∏ "${notification.eventTitle}"`);
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        await connection.execute(`
                            INSERT INTO event_notification_log 
                            (event_id, user_id, days_before, sent_at, success) 
                            VALUES (?, ?, 0, NOW(), 1)
                        `, [notification.eventId, notification.userId]);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ${notification.email}:`, error);
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ –ª–æ–≥
                        await connection.execute(`
                            INSERT INTO event_notification_log 
                            (event_id, user_id, days_before, sent_at, success) 
                            VALUES (?, ?, 0, NOW(), 0)
                        `, [notification.eventId, notification.userId]);
                    }
                }
            }
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            connection.release();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π
        console.log('–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π');
    }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(() => {
    console.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...');
    checkTodayEvents();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    const eventCheckInterval = setInterval(checkTodayEvents, 30 * 60 * 1000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    wss.on('close', function close() {
        console.log('WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤');
        clearInterval(eventCheckInterval);
        clearInterval(interval);
    });
}, 5000); // –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkEventsAndSendNotifications(daysToCheck = [0, 1, 2, 3]) {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—ã:', daysToCheck);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    const result = {
        total: 0,
        details: {}
    };
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –¥–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
    daysToCheck.forEach(days => {
        result.details[days] = 0;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if (!pool) {
        console.error('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    const connection = await pool.getConnection();
    
    try {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏–∑ —Å–ø–∏—Å–∫–∞
        for (const daysBeforeEvent of daysToCheck) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
            const eventDate = new Date();
            eventDate.setDate(eventDate.getDate() + parseInt(daysBeforeEvent));
            const eventDateString = eventDate.toISOString().split('T')[0]; // YYYY-MM-DD
            
            console.log(`üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É: ${eventDateString} (–∑–∞ ${daysBeforeEvent} –¥–Ω. –¥–æ —Å–æ–±—ã—Ç–∏—è)`);
            
            // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, –∫—Ç–æ –∏–¥–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã event_going
            console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ event_going –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
            const [eventGoingData] = await connection.execute(`
                SELECT eg.event_id, eg.user_id, eg.created_at 
                FROM event_going eg
                WHERE eg.created_at IS NOT NULL
                ORDER BY eg.created_at DESC
            `);
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${eventGoingData.length} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π`);
            
            if (eventGoingData.length === 0) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π');
                continue;
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —Å–æ–±—ã—Ç–∏–π
            const eventIds = [...new Set(eventGoingData.map(record => record.event_id))];
            console.log(`üìã –ù–∞–π–¥–µ–Ω—ã ID —Å–æ–±—ã—Ç–∏–π: ${eventIds.join(', ')}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const [eventDates] = await connection.execute(`
                SELECT id, title, event_date, DATE(event_date) as event_date_only
                FROM events
                WHERE id IN (${eventIds.join(',')})
            `);
            console.log('üìÖ –î–∞—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', eventDates);
            
            // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã events
            console.log('üîÑ –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ events –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö...');
            const [eventsData] = await connection.execute(`
                SELECT e.id, e.title, e.event_date, e.event_end_date, e.location, e.description 
                FROM events e
                WHERE e.id IN (${eventIds.join(',')})
                AND DATE(e.event_date) = DATE(?)
                AND e.event_date >= NOW()
                ORDER BY e.event_date ASC
            `, [eventDateString]);
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${eventsData.length} —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É ${eventDateString}`);
            
            if (eventsData.length === 0) {
                console.log(`‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É ${eventDateString}`);
                continue;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const eventsMap = new Map();
            eventsData.forEach(event => {
                eventsMap.set(event.id, event);
            });
            
            // 3. –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–µ—â–∞—é—Ç —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è
            const userEventPairs = [];
            eventGoingData.forEach(record => {
                if (eventsMap.has(record.event_id)) {
                    userEventPairs.push({
                        userId: record.user_id,
                        eventId: record.event_id
                    });
                }
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userEventPairs.length} –ø–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫-—Å–æ–±—ã—Ç–∏–µ`);
            
            // 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            if (userEventPairs.length === 0) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                continue;
            }
            
            const userIds = [...new Set(userEventPairs.map(pair => pair.userId))];
            console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...`);
            
            const [usersData] = await connection.execute(`
                SELECT u.id, u.username, u.email, u.firstname, u.lastname
                FROM users u
                WHERE u.id IN (${userIds.map(() => '?').join(',')})
            `, userIds);
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const usersMap = new Map();
            usersData.forEach(user => {
                usersMap.set(user.id, user);
            });
            
            console.log('üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
            
            // 5. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for (const pair of userEventPairs) {
                const user = usersMap.get(pair.userId);
                const event = eventsMap.get(pair.eventId);
                
                if (!user || !event) {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${pair.userId} –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è ${pair.eventId}`);
                    continue;
                }
                
                console.log(`üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username} –æ —Å–æ–±—ã—Ç–∏–∏ "${event.title}"`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                const [sentNotifications] = await connection.execute(`
                    SELECT id FROM event_notification_log 
                    WHERE event_id = ? 
                    AND user_id = ? 
                    AND days_before = ?
                    AND sent_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)
                `, [event.id, user.id, daysBeforeEvent]);
                
                if (sentNotifications.length > 0) {
                    console.log(`üìå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${event.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} –∑–∞ ${daysBeforeEvent} –¥–Ω. —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ`);
                    continue;
                }
                
                console.log(`üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ "${event.title}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username} <${user.email}> –∑–∞ ${daysBeforeEvent} –¥–Ω.`);
                
                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                const eventDate = new Date(event.event_date);
                const endDate = event.event_end_date ? new Date(event.event_end_date) : null;
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
                const formattedDate = eventDate.toLocaleDateString('ru-RU');
                const formattedTime = eventDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                const formattedEndTime = endDate ? endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : '';
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
                let relativeTime = '';
                switch (daysBeforeEvent) {
                    case 0:
                        relativeTime = `–°–µ–≥–æ–¥–Ω—è –≤ ${formattedTime}`;
                        break;
                    case 1:
                        relativeTime = `–ó–∞–≤—Ç—Ä–∞ –≤ ${formattedTime}`;
                        break;
                    case 2:
                        relativeTime = `–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ ${formattedTime}`;
                        break;
                    default:
                        relativeTime = `–ß–µ—Ä–µ–∑ ${daysBeforeEvent} –¥–Ω. –≤ ${formattedTime}`;
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                let urgencyMessage = '';
                let subjectPrefix = '';
                let accentColor = '#4a76a8'; // –ë–∞–∑–æ–≤—ã–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç —Å–∞–π—Ç–∞
                
                switch (parseInt(daysBeforeEvent)) {
                    case 0:
                        urgencyMessage = "–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!";
                        subjectPrefix = "–°–ï–ì–û–î–ù–Ø! ";
                        accentColor = '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        break;
                    case 1:
                        urgencyMessage = "–°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ! –°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ.";
                        subjectPrefix = "–ó–ê–í–¢–†–ê! ";
                        accentColor = '#f39c12'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                        break;
                    case 2:
                        urgencyMessage = "–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã.";
                        accentColor = '#3498db'; // –°–∏–Ω–∏–π
                        break;
                    case 3:
                        urgencyMessage = "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è.";
                        accentColor = '#2980b9'; // –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π
                        break;
                    default:
                        urgencyMessage = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏.";
                }
                
                // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
                const eventUrl = `http://localhost/phpsite/event.php?id=${event.id}`;
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞
                const subject = `${subjectPrefix}–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏: ${event.title} - ${relativeTime}`;
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è, –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                let timeInfo = `<div class='event-info'>
                    <div class='event-info-label'>–í—Ä–µ–º—è:</div>
                    <div class='event-info-value'>${formattedTime}`;

                if (formattedEndTime) {
                    timeInfo += ` - ${formattedEndTime}`;
                }

                timeInfo += `</div></div>`;
                
                // –°–æ–∑–¥–∞–µ–º HTML-—à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
                const htmlMessage = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='UTF-8'>
                    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                    <title>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏</title>
                    <style>
                        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
                        
                        body { 
                            font-family: 'Roboto', Arial, sans-serif; 
                            line-height: 1.6; 
                            color: #333; 
                            margin: 0;
                            padding: 0;
                            background-color: #f5f5f5;
                        }
                        .container { 
                            max-width: 600px; 
                            margin: 0 auto; 
                            padding: 20px;
                        }
                        .email-wrapper {
                            border-radius: 8px;
                            overflow: hidden;
                            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
                        }
                        .header { 
                            background-color: ${accentColor}; 
                            color: white; 
                            padding: 15px 20px; 
                            text-align: center;
                        }
                        .header h1 {
                            margin: 0;
                            font-size: 24px;
                            font-weight: 500;
                        }
                        .content { 
                            background-color: white; 
                            padding: 30px; 
                        }
                        .greeting {
                            font-size: 18px;
                            margin-bottom: 20px;
                        }
                        .event-details { 
                            margin: 25px 0;
                            background-color: #f9f9f9; 
                            padding: 20px; 
                            border-radius: 8px; 
                            border-left: 4px solid ${accentColor};
                        }
                        .event-title {
                            font-size: 22px;
                            margin-top: 0;
                            color: ${accentColor};
                        }
                        .footer { 
                            margin-top: 30px; 
                            font-size: 13px; 
                            color: #777; 
                            text-align: center;
                            padding: 20px;
                            background-color: #f9f9f9;
                            border-top: 1px solid #eee;
                        }
                        .button { 
                            display: inline-block; 
                            background-color: ${accentColor}; 
                            color: white !important; 
                            text-decoration: none; 
                            padding: 12px 25px; 
                            border-radius: 5px; 
                            margin-top: 25px;
                            font-weight: 500;
                            text-align: center;
                            transition: background-color 0.3s;
                        }
                        .event-info { 
                            display: flex; 
                            margin-bottom: 15px;
                            align-items: baseline;
                        }
                        .event-info-label { 
                            font-weight: 500; 
                            width: 100px;
                            color: #555;
                        }
                        .event-info-value {
                            flex: 1;
                        }
                        .urgency { 
                            color: ${daysBeforeEvent <= 1 ? '#e74c3c' : accentColor}; 
                            font-weight: 500; 
                            margin: 25px 0;
                            padding: 10px 15px;
                            background-color: ${daysBeforeEvent <= 1 ? '#ffeeee' : '#f8f9fa'};
                            border-radius: 4px;
                            font-size: 16px;
                        }
                        .description {
                            line-height: 1.7;
                            color: #555;
                        }
                    </style>
                </head>
                <body>
                    <div class='container'>
                        <div class='email-wrapper'>
                            <div class='header'>
                                <h1>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏</h1>
                            </div>
                            <div class='content'>
                                <p class='greeting'>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstname || user.username}!</p>
                                <p>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ:</p>
                                
                                <div class='event-details'>
                                    <h2 class='event-title'>${event.title}</h2>
                                    <div class='event-info'>
                                        <div class='event-info-label'>–î–∞—Ç–∞:</div>
                                        <div class='event-info-value'>${formattedDate}</div>
                                    </div>
                                    ${timeInfo}
                                    <div class='event-info'>
                                        <div class='event-info-label'>–ú–µ—Å—Ç–æ:</div>
                                        <div class='event-info-value'>${event.location}</div>
                                    </div>
                                    <div class='description'>${event.description}</div>
                                </div>
                                
                                <div class='urgency'>${urgencyMessage}</div>
                                
                                <center><a href='${eventUrl}' class='button'>–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏—è</a></center>
                            </div>
                            <div class='footer'>
                                <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                                <p>–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.</p>
                            </div>
                        </div>
                    </div>
                </body>
                </html>`;
                
                try {
                    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ ${user.email}...`);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await sendEmailNotification(user.email, subject, htmlMessage);
                    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${user.email}`);
                    result.total++;
                    result.details[daysBeforeEvent]++;
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    await connection.execute(`
                        INSERT INTO event_notification_log 
                        (event_id, user_id, days_before, sent_at, success) 
                        VALUES (?, ?, ?, NOW(), 1)
                    `, [event.id, user.id, daysBeforeEvent]);
                    
                    console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ event_notification_log: —Å–æ–±—ã—Ç–∏–µ ${event.id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ${user.email}:`, error);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ –ª–æ–≥
                    await connection.execute(`
                        INSERT INTO event_notification_log 
                        (event_id, user_id, days_before, sent_at, success) 
                        VALUES (?, ?, ?, NOW(), 0)
                    `, [event.id, user.id, daysBeforeEvent]);
                    
                    console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ event_notification_log`);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 200));
            }
        }
        
        console.log(`üìä –ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${result.total}`);
        
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        throw error;
    } finally {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
        connection.release();
        console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π
console.log('üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
function calculateNextRunTime(hour, minute) {
    const now = new Date();
    const nextRun = new Date(
        now.getFullYear(),
        now.getMonth(),
        now.getDate(),
        hour,
        minute,
        0
    );
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (nextRun <= now) {
        nextRun.setDate(nextRun.getDate() + 1);
    }
    
    return nextRun;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
function scheduleEventCheck(hour, minute) {
    try {
        const nextRun = calculateNextRunTime(hour, minute);
        const timeUntilNextRun = nextRun - new Date();
        
        console.log(`üìÜ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${nextRun.toLocaleString('ru-RU')}`);
        console.log(`‚è±Ô∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${Math.floor(timeUntilNextRun / 1000 / 60)} –º–∏–Ω—É—Ç`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
        setTimeout(() => {
            console.log(`üîî –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ ${new Date().toLocaleString('ru-RU')}`);
            
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ –≤ try-catch –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω
                if (pool) {
                    checkEventsAndSendNotifications([0, 1, 2, 3])
                        .then(result => {
                            console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
                        })
                        .catch(error => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
                        })
                        .finally(() => {
                            // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                            scheduleEventCheck(hour, minute);
                        });
                } else {
                    console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–±—ã—Ç–∏–π: –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    scheduleEventCheck(hour, minute);
                }
            } catch (e) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π:', e);
                scheduleEventCheck(hour, minute);
            }
        }, timeUntilNextRun);
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π:', e);
        // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 1 —á–∞—Å
        setTimeout(() => {
            scheduleEventCheck(hour, minute);
        }, 60 * 60 * 1000); 
    }
}

// –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è
// 08:00 - —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
scheduleEventCheck(8, 0);
// 12:00 - –¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
scheduleEventCheck(12, 0);
// 18:00 - –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
scheduleEventCheck(18, 0);

// –¢–∞–∫–∂–µ –∑–∞–ø—É—Å—Ç–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
setTimeout(() => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω
        if (pool) {
            checkEventsAndSendNotifications([0, 1, 2, 3])
                .then(result => {
                    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
                    
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                    console.log('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç');
                    setTimeout(() => {
                        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
                        try {
                            if (pool) {
                                checkEventsAndSendNotifications([0, 1, 2, 3])
                                    .then(result => {
                                        console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
                                    })
                                    .catch(secondError => {
                                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', secondError);
                                    });
                            }
                        } catch (e) {
                            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', e);
                        }
                    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
                });
        } else {
            console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            
            // –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            console.log('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç');
            setTimeout(() => {
                console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
                try {
                    if (pool) {
                        checkEventsAndSendNotifications([0, 1, 2, 3])
                            .then(result => {
                                console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
                            })
                            .catch(err => {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', err);
                            });
                    } else {
                        console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    }
                } catch (e) {
                    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', e);
                }
            }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
        }
    } catch (e) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', e);
    }
}, 15000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞

console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ 08:00, 12:00 –∏ 18:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
async function sendUpcomingEvents(ws, days = 3) {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ', days, '–¥–Ω–µ–π');
    
    if (!pool) {
        throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    try {
        const connection = await pool.getConnection();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const userId = ws.userId;
            
            if (!userId) {
                throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            console.log(`üë§ –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É event_going
            const [events] = await connection.execute(`
                SELECT e.id, e.title, e.event_date, e.event_end_date, e.location, e.description,
                       DATEDIFF(e.event_date, NOW()) as days_until,
                       eg.created_at as registration_date
                FROM events e
                JOIN event_going eg ON e.id = eg.event_id
                WHERE eg.user_id = ?
                  AND e.event_date > NOW()
                  AND e.event_date <= DATE_ADD(NOW(), INTERVAL ? DAY)
                  AND e.status = 'active'
                  AND e.is_active = 1
                ORDER BY e.event_date ASC
            `, [userId, days]);
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${events.length} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const formattedEvents = events.map(event => {
                const eventDate = new Date(event.event_date);
                const endDate = event.event_end_date ? new Date(event.event_end_date) : null;
                
                return {
                    id: event.id,
                    title: event.title,
                    date: eventDate.toISOString(),
                    end_date: endDate ? endDate.toISOString() : null,
                    formatted_date: formatDate(eventDate),
                    formatted_time: formatTime(eventDate),
                    formatted_end_time: endDate ? formatTime(endDate) : null,
                    location: event.location,
                    description: event.description,
                    days_until: event.days_until,
                    relative_time: getRelativeTimeText(event.days_until),
                    registration_date: event.registration_date
                };
            });
            
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ ${formattedEvents.length} —Å–æ–±—ã—Ç–∏—è—Ö –∫–ª–∏–µ–Ω—Ç—É...`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                    type: 'upcoming_events',
                    events: formattedEvents,
                    count: formattedEvents.length
                }));
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
            } else {
                console.log('‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
            }
            
            return { sent: true, count: formattedEvents.length };
        } finally {
            connection.release();
            console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(date) {
    return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function getRelativeTimeText(daysUntil) {
    switch (parseInt(daysUntil)) {
        case 0:
            return '–°–µ–≥–æ–¥–Ω—è';
        case 1:
            return '–ó–∞–≤—Ç—Ä–∞';
        case 2:
            return '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
        default:
            return `–ß–µ—Ä–µ–∑ ${daysUntil} –¥–Ω.`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
async function sendEventNotifications() {
    console.log('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–Ω–ª–∞–π–Ω');
    
    if (!pool) {
        console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return { success: false, error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
    }
    
    try {
        const connection = await pool.getConnection();
        
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const onlineUsers = Array.from(clients.keys());
            
            if (onlineUsers.length === 0) {
                console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω');
                return { success: true, count: 0 };
            }
            
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${onlineUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω`);
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let notificationsSent = 0;
            
            for (const userId of onlineUsers) {
                const ws = clients.get(userId);
                
                if (ws && ws.readyState === WebSocket.OPEN) {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
                    const [events] = await connection.execute(`
                        SELECT e.id, e.title, e.event_date, e.event_end_date, e.location, e.description,
                               DATEDIFF(e.event_date, NOW()) as days_until
                        FROM events e
                        JOIN event_participants ep ON e.id = ep.event_id
                        WHERE ep.user_id = ?
                          AND e.event_date > NOW()
                          AND e.event_date <= DATE_ADD(NOW(), INTERVAL 3 DAY)
                          AND e.status = 'active'
                          AND e.is_active = 1
                        ORDER BY e.event_date ASC
                        LIMIT 5
                    `, [userId]);
                    
                    if (events.length > 0) {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        const formattedEvents = events.map(event => {
                            const eventDate = new Date(event.event_date);
                            const endDate = event.event_end_date ? new Date(event.event_end_date) : null;
                            
                            return {
                                id: event.id,
                                title: event.title,
                                date: eventDate.toISOString(),
                                end_date: endDate ? endDate.toISOString() : null,
                                formatted_date: formatDate(eventDate),
                                formatted_time: formatTime(eventDate),
                                formatted_end_time: endDate ? formatTime(endDate) : null,
                                location: event.location,
                                description: event.description,
                                days_until: event.days_until,
                                relative_time: getRelativeTimeText(event.days_until)
                            };
                        });
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
                        ws.send(JSON.stringify({
                            type: 'event_notifications',
                            events: formattedEvents,
                            count: formattedEvents.length
                        }));
                        
                        notificationsSent++;
                        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${formattedEvents.length} —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
                    }
                }
            }
            
            console.log(`üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsSent}`);
            return { success: true, count: notificationsSent };
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö:', error);
        return { success: false, error: error.message };
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö —Ä–∞–∑ –≤ —á–∞—Å
setInterval(sendEventNotifications, 60 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö
wss.sendEventNotifications = sendEventNotifications;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ userId
function findClientByUserId(userId) {
    return clients.get(userId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π (–∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∏)
async function handleWebRTCMessage(data) {
    try {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è:', JSON.stringify(data));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–≤–æ–Ω–∫–æ–º
        if (data.groupId) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            await handleGroupWebRTCMessage(data);
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö)
        const senderId = parseInt(data.sender_id || data.from || (data.ws ? data.ws.userId : undefined));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
        let receiverId;
        
        if (data.receiver_id) {
            // –ï—Å–ª–∏ receiver_id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∏–∑ –Ω–µ–≥–æ
            if (typeof data.receiver_id === 'object') {
                receiverId = parseInt(data.receiver_id.senderId || data.receiver_id.id);
            } else {
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                receiverId = parseInt(data.receiver_id);
            }
        } else {
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
            receiverId = parseInt(data.to || data.recipient_id);
        }
        
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data.subtype === 'check_availability') {
            console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${receiverId} –æ—Ç ${senderId}`);
            
            // –ù–∞—Ö–æ–¥–∏–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            const receiverClient = findClientByUserId(receiverId);
            const senderClient = findClientByUserId(senderId);
            
            if (senderClient && senderClient.readyState === WebSocket.OPEN) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                const availabilityResponse = {
                    type: 'user_availability',
                    sender_id: receiverId,
                    receiver_id: senderId,
                    is_available: !!(receiverClient && receiverClient.readyState === WebSocket.OPEN),
                    reason: receiverClient ? null : 'user_offline'
                };
                
                senderClient.send(JSON.stringify(availabilityResponse));
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${availabilityResponse.is_available}`);
            }
            
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        }
        
        if (!senderId) {
            console.error('‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
            return;
        }
        
        if (!receiverId) {
            console.error('‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
            return;
        }
        
        console.log(`üìä –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${data.subtype} –æ—Ç ${senderId} –∫ ${receiverId}`);
        
        // –ù–∞—Ö–æ–¥–∏–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const receiverWs = findClientByUserId(receiverId);
        
        if (receiverWs && receiverWs.readyState === WebSocket.OPEN) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏–∑ –ë–î
            let senderName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            let senderAvatar = 'assets/images/default-avatar.png';

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                const fullName = await getUserNameById(senderId);
                if (fullName) {
                    senderName = fullName;
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}: "${senderName}"`);
                } else {
                    console.log(`‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}:`, error);
            }

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                const avatarPath = await getUserAvatarById(senderId);
                if (avatarPath) {
                    senderAvatar = avatarPath;
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}: "${senderAvatar}"`);
                } else {
                    console.log(`‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${senderId}:`, error);
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            const message = {
                type: data.type,
                subtype: data.subtype,
                sender_id: senderId,
                data: data.data || {}
            };
            
            // –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω—è—â–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.data.caller_name = senderName;
            message.data.caller_avatar = senderAvatar;
            
            console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(message));
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            receiverWs.send(JSON.stringify(message));
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${data.subtype} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${senderId} –∫ ${receiverId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            const senderWs = findClientByUserId(senderId);
            if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                const confirmationMessage = {
                    type: 'signaling_delivered',
                    originalType: data.subtype,
                    to: receiverId
                };
                senderWs.send(JSON.stringify(confirmationMessage));
            }
        } else {
            console.error(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${receiverId} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            const senderWs = findClientByUserId(senderId);
            if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                const errorMessage = {
                    type: 'signaling_error',
                    originalType: data.subtype,
                    to: receiverId,
                    error: 'recipient_offline'
                };
                senderWs.send(JSON.stringify(errorMessage));
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è:', error, data);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
async function handleGroupWebRTCMessage(data) {
    try {
        const { type, subtype, from, to, groupId, offer, answer, candidate } = data;
        
        console.log(`üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ ${subtype || type} –æ—Ç ${from} –∫ ${to} –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (to) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            const receiverWs = findClientByUserId(to);
            if (!receiverWs || receiverWs.readyState !== WebSocket.OPEN) {
                console.error(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${to} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                const senderWs = findClientByUserId(from);
                if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                    const errorMessage = {
                        type: 'signaling_error',
                        originalType: subtype || type,
                        to: to,
                        groupId: groupId,
                        error: 'recipient_offline'
                    };
                    senderWs.send(JSON.stringify(errorMessage));
                }
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            let senderName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            let senderAvatar = 'assets/images/default-avatar.png';
            
            try {
                const fullName = await getUserNameById(from);
                if (fullName) {
                    senderName = fullName;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from}:`, error);
            }
            
            try {
                const avatarPath = await getUserAvatarById(from);
                if (avatarPath) {
                    senderAvatar = avatarPath;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from}:`, error);
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const enrichedData = {
                ...data,
                sender_name: senderName,
                sender_avatar: senderAvatar
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            receiverWs.send(JSON.stringify(enrichedData));
            console.log(`‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${subtype || type} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç ${from} –∫ ${to} –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            const senderWs = findClientByUserId(from);
            if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                const confirmationMessage = {
                    type: 'group_signaling_delivered',
                    originalType: subtype || type,
                    to: to,
                    groupId: groupId
                };
                senderWs.send(JSON.stringify(confirmationMessage));
            }
        } 
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        else if (data.participants) {
            console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            let senderName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            let senderAvatar = 'assets/images/default-avatar.png';
            
            try {
                const fullName = await getUserNameById(from);
                if (fullName) {
                    senderName = fullName;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from}:`, error);
            }
            
            try {
                const avatarPath = await getUserAvatarById(from);
                if (avatarPath) {
                    senderAvatar = avatarPath;
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from}:`, error);
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const enrichedData = {
                ...data,
                sender_name: senderName,
                sender_avatar: senderAvatar
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            let deliveredCount = 0;
            for (const participantId of data.participants) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                if (parseInt(participantId) === parseInt(from)) {
                    continue;
                }
                
                const participantWs = findClientByUserId(parseInt(participantId));
                if (participantWs && participantWs.readyState === WebSocket.OPEN) {
                    participantWs.send(JSON.stringify(enrichedData));
                    deliveredCount++;
                }
            }
            
            console.log(`‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ${deliveredCount} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ ${groupId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            const senderWs = findClientByUserId(from);
            if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                const confirmationMessage = {
                    type: 'group_broadcast_delivered',
                    originalType: subtype || type,
                    groupId: groupId,
                    deliveredCount: deliveredCount
                };
                senderWs.send(JSON.stringify(confirmationMessage));
            }
        } else {
            console.error('‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–µ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
async function getUserAvatarById(userId) {
    try {
        if (!pool) {
            console.error('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return null;
        }
        
        const connection = await pool.getConnection();
        
        try {
            const [rows] = await connection.execute(
                'SELECT avatar FROM users WHERE id = ?',
                [userId]
            );
            
            if (rows.length > 0) {
                return rows[0].avatar;
            }
            
            return null;
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
function handleVideoCallRequest(data) {
    try {
        const recipientId = parseInt(data.recipientId || data.to);
        const senderId = parseInt(data.senderId || data.from);
        
        if (!recipientId || !senderId) {
            console.error('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', data);
            return;
        }
        
        console.log(`üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –æ—Ç ${senderId} –∫ ${recipientId}`);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ WebRTC —Ñ–æ—Ä–º–∞—Ç
        const webrtcMessage = {
            type: 'webrtc_message',
            subtype: 'video_call_offer',
            sender_id: senderId,
            receiver_id: recipientId,
            data: {
                sdp: data.sdp,
                caller_name: data.senderName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        };
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        handleWebRTCMessage(webrtcMessage);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫
function handleAudioCallRequest(data) {
    try {
        const recipientId = parseInt(data.recipientId || data.to);
        const senderId = parseInt(data.senderId || data.from);
        
        if (!recipientId || !senderId) {
            console.error('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞:', data);
            return;
        }
        
        console.log(`üîä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –æ—Ç ${senderId} –∫ ${recipientId}`);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ WebRTC —Ñ–æ—Ä–º–∞—Ç
        const webrtcMessage = {
            type: 'webrtc_message',
            subtype: 'audio_call_offer',
            sender_id: senderId,
            receiver_id: recipientId,
            data: {
                sdp: data.sdp,
                caller_name: data.senderName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        };
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        handleWebRTCMessage(webrtcMessage);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫:', error);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleMessage –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function handleMessage(ws, message) {
    try {
        const data = JSON.parse(message);
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ ${data.type}`);
        
        switch (data.type) {
            case 'authentication':
            case 'init':
                handleAuthentication(ws, data);
                break;
            case 'group_call_invitation':
                handleGroupCallInvitation(data);
                break;       
            case 'chat_message':
                handleChatMessage(data);
                break;
                
            case 'gift_message':
                handleGiftMessage(data);
                break;
                
            case 'audio_call_request':
                handleAudioCallRequest(data);
                break;
                
            case 'video_call_request':
                handleVideoCallRequest(data);
                break;
                
            case 'webrtc_message':
                handleWebRTCMessage(data);
                break;
                
            case 'typing_status':
                handleTypingStatus(data);
                break;
                
            case 'status_update':
                handleStatusUpdate(data);
                break;
                
            case 'user_warning':
                handleUserWarning(data);
                break;
                // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

// –í —Ñ—É–Ω–∫—Ü–∏–∏ handleMessage –¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π:
case 'offer':
    case 'answer':
    case 'ice-candidate':
        const recipientId = parseInt(messageData.to);
        const senderId = parseInt(messageData.from);
        const recipientWs = clients.get(recipientId);
        
        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            console.log(`üì® Forwarding ${messageData.type} from ${senderId} to ${recipientId}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const message = {
                ...messageData,
                timestamp: new Date().toISOString()
            };
            
            try {
                recipientWs.send(JSON.stringify(message));
                console.log(`‚úÖ Successfully forwarded ${messageData.type}`);
            } catch (error) {
                console.error(`‚ùå Error forwarding ${messageData.type}:`, error);
            }
        } else {
            console.log(`‚ö†Ô∏è Cannot forward ${messageData.type}: recipient ${recipientId} not connected`);
        }
        break;
    
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—É–¥–∏–æ –∑–≤–æ–Ω–∫–æ–≤:
    case 'audio_call_request':
        const audioCallRecipientId = parseInt(messageData.recipientId);
        const audioCallSenderId = parseInt(messageData.senderId);
        const audioCallRecipientWs = clients.get(audioCallRecipientId);
        
        console.log('Processing audio call request:', {
            from: audioCallSenderId,
            to: audioCallRecipientId
        });
    
        if (audioCallRecipientWs && audioCallRecipientWs.readyState === WebSocket.OPEN) {
            // Check if recipient is already in a call
            if (active–°alls.has(audioCallRecipientId)) {
                ws.send(JSON.stringify({
                    type: 'audio_call_rejected',
                    reason: 'user_busy',
                    recipientId: audioCallRecipientId,
                    senderId: audioCallSenderId
                }));
                return;
            }
    
            // Save call information
            active–°alls.set(audioCallRecipientId, {
                callerId: audioCallSenderId,
                timestamp: Date.now(),
                type: 'audio'
            });
            active–°alls.set(audioCallSenderId, {
                callerId: audioCallRecipientId,
                timestamp: Date.now(),
                type: 'audio'
            });
    
            // Forward request to recipient
            audioCallRecipientWs.send(JSON.stringify({
                type: 'audio_call_request',
                senderId: audioCallSenderId,
                senderName: messageData.senderName || 'Unknown User',
                sdp: messageData.sdp
            }));
            
            console.log('Audio call request forwarded to:', audioCallRecipientId);
        } else {
            ws.send(JSON.stringify({
                type: 'audio_call_rejected',
                reason: 'user_offline',
                recipientId: audioCallRecipientId,
                senderId: audioCallSenderId
            }));
        }
        break;
    
    case 'audio_call_accepted':
        const audioAcceptedSenderId = parseInt(messageData.recipientId);
        const audioAcceptedRecipientId = parseInt(messageData.senderId);
        const audioAcceptedSenderWs = clients.get(audioAcceptedSenderId);
        
        console.log('Audio call accepted:', {
            from: audioAcceptedRecipientId,
            to: audioAcceptedSenderId
        });
        
        if (audioAcceptedSenderWs && audioAcceptedSenderWs.readyState === WebSocket.OPEN) {
            audioAcceptedSenderWs.send(JSON.stringify({
                type: 'audio_call_accepted',
                senderId: audioAcceptedRecipientId,
                sdp: messageData.sdp
            }));
        }
        break;
    
    case 'audio_call_rejected':
        const audioRejectedSenderId = parseInt(messageData.recipientId);
        const audioRejectedRecipientId = parseInt(messageData.senderId);
        const audioRejectedSenderWs = clients.get(audioRejectedSenderId);
        
        // Clean up call information
        active–°alls.delete(audioRejectedSenderId);
        active–°alls.delete(audioRejectedRecipientId);
        
        if (audioRejectedSenderWs && audioRejectedSenderWs.readyState === WebSocket.OPEN) {
            audioRejectedSenderWs.send(JSON.stringify({
                type: 'audio_call_rejected',
                senderId: audioRejectedRecipientId,
                reason: messageData.reason || 'declined'
            }));
        }
        break;
    
    case 'audio_call_end':
        const audioEndUserId = parseInt(messageData.senderId);
        const audioEndPeerId = parseInt(messageData.recipientId);
        
        // Clean up call information
        active–°alls.delete(audioEndUserId);
        active–°alls.delete(audioEndPeerId);
        
        const audioEndPeerWs = clients.get(audioEndPeerId);
        if (audioEndPeerWs && audioEndPeerWs.readyState === WebSocket.OPEN) {
            audioEndPeerWs.send(JSON.stringify({
                type: 'audio_call_end',
                senderId: audioEndUserId
            }));
        }
        break;
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
                
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            case 'initGroupCall':
                handleInitGroupCall(data);
                break;
                
            case 'joinGroupCall':
                handleJoinGroupCall(data);
                break;
                
            case 'leaveGroupCall':
                handleLeaveGroupCall(data);
                break;
                
            case 'declineGroupCall':
                handleDeclineGroupCall(data);
                break;
                
            case 'initGroupVideoCall':
                handleInitGroupVideoCall(data);
                break;
                
            case 'leaveGroupVideoCall':
                handleLeaveGroupVideoCall(data);
                break;
                
            case 'ice_candidate':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Ç–∞–∫ –∂–µ, –∫–∞–∫ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'ice_candidate',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: {
                        candidate: data.candidate
                    }
                });
                break;
                
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            case 'video_call_rejected':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'video_call_rejected',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: {
                        reason: data.reason || 'call_rejected'
                    }
                });
                break;
                
            case 'video_call_end':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'video_call_end',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: {}
                });
                break;
                
            default:
                console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.type}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
module.exports = {
    initialize: function() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
        initializeWebSocketServer();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        messageHandlers = {
            'authentication': handleAuthentication,
            'check_user_availability': handleUserAvailabilityCheck,
            'chat_message': handleChatMessage,
            'gift_message': handleGiftMessage,
            'audio_call_request': handleAudioCallRequest,
            'video_call_request': handleVideoCallRequest,
            'webrtc_message': handleWebRTCMessage,
            'typing_status': handleTypingStatus,
            'status_update': handleStatusUpdate,
            'ice_candidate': function(data) {
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'ice_candidate',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: { candidate: data.candidate }
                });
            },
            'video_call_rejected': function(data) {
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'video_call_rejected',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: { reason: data.reason || 'call_rejected' }
                });
            },
            'video_call_end': function(data) {
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'video_call_end',
                    sender_id: data.sender_id || data.senderId,
                    receiver_id: data.recipient_id || data.recipientId,
                    data: {}
                });
            },
            'user_warning': handleUserWarning
        };
        
        return wss;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
async function handleChatMessage(data) {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', JSON.stringify(data));
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!data.sender_id || !data.recipient_id) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:');
            console.error('sender_id:', data.sender_id);
            console.error('recipient_id:', data.recipient_id);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (data.ws && data.ws.readyState === WebSocket.OPEN) {
                data.ws.send(JSON.stringify({
                    type: 'error',
                    error: 'Missing required fields',
                    details: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è sender_id –∏/–∏–ª–∏ recipient_id'
                }));
            }
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if (!pool) {
            console.error('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return;
        }
        
        const connection = await pool.getConnection();
        
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
            const messageToSave = {
                sender_id: data.sender_id,
                recipient_id: data.recipient_id,
                message_text: data.message_text || '',
                message_type: data.message_type || 'text',
                image_url: data.message_type === 'image' ? (data.image_url || null) : null,
                video_url: data.message_type === 'video' ? (data.video_url || data.file_url || null) : null,
                file_url: data.message_type === 'file' ? (data.file_url || null) : null,
                file_name: data.file_name || null
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const [result] = await connection.execute(
                `INSERT INTO messages 
                (sender_id, recipient_id, message_text, message_type, image_url, video_url, file_url, file_name, created_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())`,
                [
                    messageToSave.sender_id,
                    messageToSave.recipient_id,
                    messageToSave.message_text,
                    messageToSave.message_type,
                    messageToSave.image_url,
                    messageToSave.video_url,
                    messageToSave.file_url,
                    messageToSave.file_name
                ]
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            const [savedMessageData] = await connection.execute(
                `SELECT m.*, u.username as sender_username, u.avatar as sender_avatar 
                FROM messages m 
                JOIN users u ON m.sender_id = u.id 
                WHERE m.id = ?`,
                [result.insertId]
            );
            
            if (!savedMessageData.length) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
            
            const savedMessage = savedMessageData[0];
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            const senderWs = clients.get(data.sender_id);
            if (senderWs && senderWs.readyState === WebSocket.OPEN) {
                senderWs.send(JSON.stringify({
                    type: 'message_saved',
                    message_id: savedMessage.id,
                    temp_id: data.temp_id,
                    created_at: savedMessage.created_at
                }));
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
            const recipientWs = clients.get(data.recipient_id);
            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
                recipientWs.send(JSON.stringify({
                    type: 'chat_message',
                    id: savedMessage.id,
                    sender_id: data.sender_id,
                    recipient_id: data.recipient_id,
                    message_text: savedMessage.message_text,
                    message_type: savedMessage.message_type,
                    image_url: savedMessage.image_url,
                    video_url: savedMessage.video_url,
                    file_url: savedMessage.file_url,
                    file_name: savedMessage.file_name,
                    created_at: savedMessage.created_at,
                    is_read: 0,
                    sender_username: savedMessage.sender_username,
                    sender_avatar: savedMessage.sender_avatar
                }));
                
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é ${data.recipient_id}`);
            } else {
                console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${data.recipient_id} –Ω–µ –≤ —Å–µ—Ç–∏`);
            }
            
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ message_saved –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserAvailabilityCheck(ws, data) {
    try {
        console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.userId}`);
        
        if (!data.userId) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const isOnline = clients.has(data.userId.toString());
        
        console.log(`üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.userId}: ${isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ—Ñ–ª–∞–π–Ω'}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
        const response = {
            type: 'status_update',
            userId: data.userId,
            isOnline: isOnline,
            timestamp: new Date().toISOString()
        };
        
        ws.send(JSON.stringify(response));
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
        if (isOnline) {
            if (pool) {
                try {
                    const connection = await pool.getConnection();
                    try {
                        await connection.execute(
                            'UPDATE users SET last_activity = NOW() WHERE id = ?',
                            [data.userId]
                        );
                    } finally {
                        connection.release();
                    }
                } catch (dbError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity –≤ –ë–î:', dbError);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function handleAuthentication(ws, data) {
    try {
        if (!data.userId) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            return;
        }
        
        const userId = parseInt(data.userId);
        
        console.log('üë§ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –≤ –æ–±—ä–µ–∫—Ç–µ ws
        ws.userId = userId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ Map –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients.set(userId, ws);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω"
        userStatuses.set(userId, true);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
        ws.send(JSON.stringify({
            type: 'auth_success',
            userId: userId,
            timestamp: new Date().toISOString()
        }));
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        broadcastStatus(userId, true);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', {
            userId: userId,
            totalClients: clients.size,
            onlineUsers: Array.from(userStatuses.entries())
                .filter(([_, status]) => status).length
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (pool) {
            try {
                (async () => {
                    const connection = await pool.getConnection();
                    try {
                        await connection.execute(
                            'UPDATE users SET is_online = 1, last_seen = NOW() WHERE id = ?',
                            [userId]
                        );
                        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', userId);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error);
                    } finally {
                        connection.release();
                    }
                })();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î:', error);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// Add handler function for user warnings
function handleUserWarning(data) {
    try {
        console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        
        // Check if recipient is specified
        if (!data.userId) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
            return;
        }
        
        const userId = parseInt(data.userId);
        
        // Check if user is online
        const recipientWs = clients.get(userId);
        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            
            // Forward the warning notification to the user
            recipientWs.send(JSON.stringify({
                type: 'user_warning',
                warning: data
            }));
        } else {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –≤ —Å–µ—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            // User is offline, will see notification when they log in
        }
        
        // Attempt to send an email if no WebSocket is available
        if (data.email && (!recipientWs || recipientWs.readyState !== WebSocket.OPEN)) {
            sendWarningEmail(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// Function to send warning email
function sendWarningEmail(data) {
    try {
        if (!data.email || !data.userName || !data.reason) {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º');
            return;
        }
        
        const duration_text = (data.duration == 0) ? 'Permanent' : data.duration + ' day(s)';
        const expiry_text = (data.duration == 0) ? 'This warning does not expire' : 'This warning expires in ' + data.duration + ' days';
        
        // Create HTML message
        const message = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>Warning Notice</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    margin: 0;
                    padding: 0;
                }
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 5px;
                }
                .header {
                    background-color: #f8d7da;
                    color: #721c24;
                    padding: 15px;
                    margin-bottom: 20px;
                    border-radius: 5px;
                    border-left: 5px solid #f5c6cb;
                }
                .content {
                    padding: 15px;
                }
                .footer {
                    margin-top: 30px;
                    padding-top: 10px;
                    border-top: 1px solid #ddd;
                    font-size: 12px;
                    color: #666;
                }
                h2 {
                    color: #721c24;
                }
                .warning-details {
                    background-color: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 15px 0;
                }
                .warning-reason {
                    font-weight: bold;
                    font-size: 16px;
                    color: #721c24;
                }
            </style>
        </head>
        <body>
            <div class='container'>
                <div class='header'>
                    <h2>Warning Notice</h2>
                </div>
                <div class='content'>
                    <p>Dear ${data.userName},</p>
                    
                    <p>Your account has received a warning from one of our administrators. Please review the details below and ensure that you follow our community guidelines.</p>
                    
                    <div class='warning-details'>
                        <p><strong>Reason:</strong> <span class='warning-reason'>${data.reason}</span></p>
                        <p><strong>Details:</strong> ${data.details || 'No details provided'}</p>
                        <p><strong>Duration:</strong> ${duration_text}</p>
                        <p><strong>Expiry:</strong> ${expiry_text}</p>
                        <p><strong>Issued by:</strong> ${data.adminName || 'Administrator'}</p>
                        <p><strong>Issued on:</strong> ${new Date().toLocaleDateString()}</p>
                    </div>
                    
                    <p>Please note that multiple warnings may result in account restrictions or suspension.</p>
                    
                    <p>If you believe this warning was issued in error, please contact our support team for assistance.</p>
                    
                    <p>Thank you for your cooperation.</p>
                </div>
                <div class='footer'>
                    <p>This is an automated message. Please do not reply to this email.</p>
                    <p>&copy; ${new Date().getFullYear()} Our Website. All rights reserved.</p>
                </div>
            </div>
        </body>
        </html>`;
        
        // Send the email
        sendEmailNotification(data.email, 'Warning Notice - Account Action Required', message)
            .then(() => {
                console.log(`‚úÖ Email —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${data.email}`);
            })
            .catch(error => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º:`, error);
            });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ email —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
function handleTypingStatus(data) {
    try {
        console.log('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if (!data.sender_id || !data.recipient_id) {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞');
            return;
        }
        
        const senderId = parseInt(data.sender_id);
        const recipientId = parseInt(data.recipient_id);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const recipientWs = clients.get(recipientId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}`);
            
            recipientWs.send(JSON.stringify({
                type: 'typing_status',
                sender_id: senderId,
                recipient_id: recipientId,
                is_typing: data.is_typing || false
            }));
        } else {
            console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${recipientId} –Ω–µ –≤ —Å–µ—Ç–∏, —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleStatusUpdate(data) {
    try {
        console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å
        if (!data.userId || typeof data.isOnline !== 'boolean') {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        const userId = parseInt(data.userId);
        const isOnline = data.isOnline;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        userStatuses.set(userId, isOnline);
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º —Å—Ç–∞—Ç—É—Å–µ
        broadcastStatus(userId, isOnline);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (pool) {
            (async () => {
                try {
                    const connection = await pool.getConnection();
                    try {
                        await connection.execute(
                            'UPDATE users SET is_online = ?, last_seen = NOW() WHERE id = ?',
                            [isOnline ? 1 : 0, userId]
                        );
                        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${isOnline ? 'online' : 'offline'}`);
                    } finally {
                        connection.release();
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error);
                }
            })();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ WebSocket
async function sendEventWebSocketNotification(userId, event) {
    try {
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ userId
        const client = clients.get(userId);
        if (!client) {
            console.log(`–ö–ª–∏–µ–Ω—Ç ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = {
            type: 'event_notification',
            event: {
                id: event.id,
                title: event.title,
                event_date: event.event_date,
                location: event.location,
                description: event.description
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        client.send(JSON.stringify(message));
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ checkEventsForDate –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkEventsForDate(date, daysUntil) {
    try {
        // ... existing code ...

        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö
        for (const event of events) {
            for (const userId of event.userIds) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notificationKey = `event_${event.id}_${userId}_${daysUntil}`;
                if (!sentNotifications.has(notificationKey)) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await sendEmailNotification(userId, event);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await sendEventWebSocketNotification(userId, event);
                    
                    sentNotifications.add(notificationKey);
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö —á–µ—Ä–µ–∑ WebSocket
async function sendEventNotifications(events, userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const client = connectedClients.get(userId);
        if (!client) {
            console.log(`–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const formattedEvents = events.map(event => ({
            id: event.id,
            title: event.title,
            date: event.event_date,
            location: event.location,
            description: event.description,
            priority: getEventPriority(event.event_date)
        }));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        client.send(JSON.stringify({
            type: 'event_notifications',
            events: formattedEvents
        }));

        console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${formattedEvents.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ–±—ã—Ç–∏—è
function getEventPriority(eventDate) {
    const now = new Date();
    const event = new Date(eventDate);
    const diffDays = Math.ceil((event - now) / (1000 * 60 * 60 * 24));
    
    if (diffDays <= 1) return 'high';
    if (diffDays <= 3) return 'medium';
    return 'low';
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkEvents
async function checkEvents() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–≥–æ–¥–Ω—è –∏ —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è)
        const dates = [0, 1, 2, 3].map(days => {
            const date = new Date();
            date.setDate(date.getDate() + days);
            return date.toISOString().split('T')[0];
        });
        
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—ã:', dates);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        const connection = await pool.getConnection();
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        let totalNotifications = 0;
        const details = {};
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É
        for (const date of dates) {
            const daysUntil = dates.indexOf(date);
            console.log(`üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É: ${date} (–∑–∞ ${daysUntil} –¥–Ω. –¥–æ —Å–æ–±—ã—Ç–∏—è)`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            const [eventGoingRows] = await connection.execute(
                `SELECT eg.*, e.title, e.event_date, e.location, e.description 
                 FROM event_going eg 
                 JOIN events e ON eg.event_id = e.id 
                 WHERE DATE(e.event_date) = ?`,
                [date]
            );
            
            if (eventGoingRows.length === 0) {
                console.log(`‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞—Ç—É ${date}`);
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userIds = [...new Set(eventGoingRows.map(row => row.user_id))];
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            const [users] = await connection.execute(
                'SELECT id, username, email FROM users WHERE id IN (?)',
                [userIds]
            );
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${eventGoingRows.length} –ø–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫-—Å–æ–±—ã—Ç–∏–µ`);
            console.log(`üìß –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...`);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const user of users) {
                const userEvents = eventGoingRows.filter(row => row.user_id === user.id);
                
                for (const event of userEvents) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    const [existingNotification] = await connection.execute(
                        `SELECT id FROM event_notification_log 
                         WHERE user_id = ? AND event_id = ? AND days_until = ? 
                         AND created_at > DATE_SUB(NOW(), INTERVAL 24 HOUR)`,
                        [user.id, event.event_id, daysUntil]
                    );
                    
                    if (existingNotification.length > 0) {
                        console.log(`üìå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${event.event_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} –∑–∞ ${daysUntil} –¥–Ω. —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ`);
                        continue;
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                    await sendEventNotifications([event], user.id);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await connection.execute(
                        `INSERT INTO event_notification_log (user_id, event_id, days_until, created_at) 
                         VALUES (?, ?, ?, NOW())`,
                        [user.id, event.event_id, daysUntil]
                    );
                    
                    totalNotifications++;
                    details[daysUntil] = (details[daysUntil] || 0) + 1;
                }
            }
        }
        
        console.log(`üìä –ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${totalNotifications}`);
        connection.release();
        
        return {
            total: totalNotifications,
            details
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
        throw error;
    }
}

// Function to handle gift messages
function handleGiftMessage(data) {
    try {
        const recipientId = parseInt(data.recipient_id);
        const senderId = parseInt(data.sender_id);
        
        if (!recipientId || !senderId) {
            console.error('‚ùå Invalid data for gift message:', data);
            return;
        }
        
        console.log(`üéÅ Processing gift message from ${senderId} to ${recipientId}`);
        
        // Find recipient client
        const recipientClient = findClientByUserId(recipientId);
        
        if (recipientClient) {
            // Get sender information
            getUserNameById(senderId).then(senderName => {
                // Send notification to recipient
                const notification = {
                    type: 'gift_notification',
                    sender_id: senderId,
                    sender_name: senderName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    data: data.data || {}
                };
                
                recipientClient.send(JSON.stringify(notification));
                console.log(`üéÅ Gift notification sent to user ${recipientId}`);
                
                // Send email notification if user is offline
                if (recipientClient.readyState !== WebSocket.OPEN) {
                    getUserEmailFromDB(recipientId).then(email => {
                        if (email) {
                            const subject = '–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫';
                            const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫. –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.`;
                            sendEmailNotification(email, subject, message);
                            console.log(`üìß Gift email notification sent to ${email}`);
                        }
                    }).catch(error => {
                        console.error('‚ùå Error getting recipient email:', error);
                    });
                }
            }).catch(error => {
                console.error('‚ùå Error getting sender name:', error);
            });
        } else {
            console.log(`‚ö†Ô∏è Recipient ${recipientId} not found or offline`);
            
            // Store notification for when they come online
            // (Implementation depends on your notification system)
        }
    } catch (error) {
        console.error('‚ùå Error processing gift message:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
function handleGiftMessage(message) {
    console.log('Handling gift message:', message);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if (!message.sender_id || !message.recipient_id) {
        console.error('Missing required fields in gift message');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const senderId = parseInt(message.sender_id);
    const recipientId = parseInt(message.recipient_id);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipientConnections = clients.filter(client => client.userId === recipientId);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (recipientConnections.length > 0) {
        console.log(`Found ${recipientConnections.length} connections for recipient ${recipientId}`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const notificationMessage = {
            type: 'gift_notification',
            sender_id: senderId,
            sender_name: message.sender_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
            timestamp: new Date().toISOString(),
            message: '–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!',
            files: message.files || []
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipientConnections.forEach(client => {
            client.ws.send(JSON.stringify(notificationMessage));
            console.log(`Sent gift notification to client ${client.userId}`);
        });
    } else {
        console.log(`Recipient ${recipientId} is offline, sending email notification`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ø–æ—á—Ç–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω
        sendEmailNotification(recipientId, {
            type: 'gift',
            sender_id: senderId,
            message: '–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!'
        });
    }
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ handleMessage –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
// –í —Ñ—É–Ω–∫—Ü–∏–∏ handleMessage –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
function handleMessage(message) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        let messageData;
        
        if (typeof message === 'string') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ–≥–æ –∫–∞–∫ JSON
            messageData = JSON.parse(message);
        } else if (typeof message === 'object') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            messageData = message;
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', typeof message);
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageType = messageData.type || 'unknown';
        
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${messageType}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        switch (messageType) {
            case 'gift':
                handleGiftMessage(messageData);
                break;
            case 'group_call_invitation':
                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º messageData –≤–º–µ—Å—Ç–æ data
                handleGroupCallInvitation(messageData);
                break;   
            case 'webrtc_message':
                handleWebRTCMessage(messageData);
                break;
            
            // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
            
            case 'authentication':
            case 'init':
                handleAuthentication(messageData.ws, messageData);
                break;
                
            case 'chat_message':
                handleChatMessage(messageData);
                break;
                
            case 'audio_call_request':
                handleAudioCallRequest(messageData);
                break;
                
            case 'video_call_request':
                handleVideoCallRequest(messageData);
                break;
                
            case 'typing_status':
                handleTypingStatus(messageData);
                break;
                
            case 'status_update':
                handleStatusUpdate(messageData);
                break;
                
            case 'user_warning':
                handleUserWarning(messageData);
                break;
                // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

// –í —Ñ—É–Ω–∫—Ü–∏–∏ handleMessage –¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π:
case 'offer':
    case 'answer':
    case 'ice-candidate':
        const recipientId = parseInt(messageData.to);
        const senderId = parseInt(messageData.from);
        const recipientWs = clients.get(recipientId);
        
        if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {
            console.log(`üì® Forwarding ${messageData.type} from ${senderId} to ${recipientId}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const message = {
                ...messageData,
                timestamp: new Date().toISOString()
            };
            
            try {
                recipientWs.send(JSON.stringify(message));
                console.log(`‚úÖ Successfully forwarded ${messageData.type}`);
            } catch (error) {
                console.error(`‚ùå Error forwarding ${messageData.type}:`, error);
            }
        } else {
            console.log(`‚ö†Ô∏è Cannot forward ${messageData.type}: recipient ${recipientId} not connected`);
        }
        break;
    
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—É–¥–∏–æ –∑–≤–æ–Ω–∫–æ–≤:
    case 'audio_call_request':
        const audioCallRecipientId = parseInt(messageData.recipientId);
        const audioCallSenderId = parseInt(messageData.senderId);
        const audioCallRecipientWs = clients.get(audioCallRecipientId);
        
        console.log('Processing audio call request:', {
            from: audioCallSenderId,
            to: audioCallRecipientId
        });
    
        if (audioCallRecipientWs && audioCallRecipientWs.readyState === WebSocket.OPEN) {
            // Check if recipient is already in a call
            if (active–°alls.has(audioCallRecipientId)) {
                ws.send(JSON.stringify({
                    type: 'audio_call_rejected',
                    reason: 'user_busy',
                    recipientId: audioCallRecipientId,
                    senderId: audioCallSenderId
                }));
                return;
            }
    
            // Save call information jitsi
            active–°alls.set(audioCallRecipientId, {
                callerId: audioCallSenderId,
                timestamp: Date.now(),
                type: 'audio'
            });
            active–°alls.set(audioCallSenderId, {
                callerId: audioCallRecipientId,
                timestamp: Date.now(),
                type: 'audio'
            });
    
            // Forward request to recipient
            audioCallRecipientWs.send(JSON.stringify({
                type: 'audio_call_request',
                senderId: audioCallSenderId,
                senderName: messageData.senderName || 'Unknown User',
                sdp: messageData.sdp
            }));
            
            console.log('Audio call request forwarded to:', audioCallRecipientId);
        } else {
            ws.send(JSON.stringify({
                type: 'audio_call_rejected',
                reason: 'user_offline',
                recipientId: audioCallRecipientId,
                senderId: audioCallSenderId
            }));
        }
        break;
    
    case 'audio_call_accepted':
        const audioAcceptedSenderId = parseInt(messageData.recipientId);
        const audioAcceptedRecipientId = parseInt(messageData.senderId);
        const audioAcceptedSenderWs = clients.get(audioAcceptedSenderId);
        
        console.log('Audio call accepted:', {
            from: audioAcceptedRecipientId,
            to: audioAcceptedSenderId
        });
        
        if (audioAcceptedSenderWs && audioAcceptedSenderWs.readyState === WebSocket.OPEN) {
            audioAcceptedSenderWs.send(JSON.stringify({
                type: 'audio_call_accepted',
                senderId: audioAcceptedRecipientId,
                sdp: messageData.sdp
            }));
        }
        break;
    
    case 'audio_call_rejected':
        const audioRejectedSenderId = parseInt(messageData.recipientId);
        const audioRejectedRecipientId = parseInt(messageData.senderId);
        const audioRejectedSenderWs = clients.get(audioRejectedSenderId);
        
        // Clean up call information
        active–°alls.delete(audioRejectedSenderId);
        active–°alls.delete(audioRejectedRecipientId);
        
        if (audioRejectedSenderWs && audioRejectedSenderWs.readyState === WebSocket.OPEN) {
            audioRejectedSenderWs.send(JSON.stringify({
                type: 'audio_call_rejected',
                senderId: audioRejectedRecipientId,
                reason: messageData.reason || 'declined'
            }));
        }
        break;
    
    case 'audio_call_end':
        const audioEndUserId = parseInt(messageData.senderId);
        const audioEndPeerId = parseInt(messageData.recipientId);
        
        // Clean up call information
        active–°alls.delete(audioEndUserId);
        active–°alls.delete(audioEndPeerId);
        
        const audioEndPeerWs = clients.get(audioEndPeerId);
        if (audioEndPeerWs && audioEndPeerWs.readyState === WebSocket.OPEN) {
            audioEndPeerWs.send(JSON.stringify({
                type: 'audio_call_end',
                senderId: audioEndUserId
            }));
        }
        break;
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
                
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            case 'initGroupCall':
                handleInitGroupCall(messageData);
                break;
                
            case 'joinGroupCall':
                handleJoinGroupCall(messageData);
                break;
                
            case 'leaveGroupCall':
                handleLeaveGroupCall(messageData);
                break;
                
            case 'declineGroupCall':
                handleDeclineGroupCall(messageData);
                break;
                
            case 'initGroupVideoCall':
                handleInitGroupVideoCall(messageData);
                break;
                
            case 'leaveGroupVideoCall':
                handleLeaveGroupVideoCall(messageData);
                break;
                
            case 'ice_candidate':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–∞–∫ WebRTC —Å–æ–æ–±—â–µ–Ω–∏—è
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'ice_candidate',
                    sender_id: messageData.sender_id || messageData.senderId,
                    receiver_id: messageData.recipient_id || messageData.recipientId,
                    data: {
                        candidate: messageData.candidate
                    }
                });
                break;
                
            case 'video_call_rejected':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
                handleWebRTCMessage({
                    type: 'webrtc_message',
                    subtype: 'video_call_rejected',
                    sender_id: messageData.sender_id || messageData.senderId,
                    receiver_id: messageData.recipient_id || messageData.recipientId,
                    data: {
                        reason: messageData.reason || 'call_rejected'
                    }
                });
                break;
            
            case 'check_availability':
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                handleUserAvailabilityCheck(messageData.ws, messageData);
                break;
                
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageType}`);
                break;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
// ... existing code ...
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫
// ... existing code ...

function handleGroupCallInvitation(data) {
    try {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!data.groupId || !data.initiatorId) {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫:', data);
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º roomId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        const roomId = data.roomId || `group_${data.groupId}_${Date.now()}`;
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∫–∞–∫ —á–∏—Å–ª–æ
        const initiatorId = parseInt(data.initiatorId);
        
        // –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        let invitationsSent = 0;
        let failedInvitations = [];
        
        console.log(`üîç –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        clients.forEach((clientWs, clientId) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            if (clientId === initiatorId) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞: ${initiatorId}`);
                return;
            }
            
            console.log(`üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}, —Å—Ç–∞—Ç—É—Å: ${clientWs ? clientWs.readyState : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
            if (clientWs && clientWs.readyState === WebSocket.OPEN) {
                try {
                    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${clientId}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–æ–∫
                    clientWs.send(JSON.stringify({
                        type: 'group_call_invitation',
                        roomId: roomId,
                        groupId: data.groupId,
                        groupName: data.groupName || '–ì—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫',
                        groupAvatar: data.groupAvatar || 'assets/images/group/default-avatar.jpg',
                        groupCover: data.groupCover || 'assets/images/group/default-cover.jpg',
                        initiatorId: initiatorId,
                        initiatorName: data.initiatorName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        initiatorAvatar: data.initiatorAvatar || 'assets/images/avatars/default.jpg',
                        callType: data.callType || (data.isAudioOnly ? 'audio' : 'video'),
                        isAudioOnly: data.isAudioOnly || data.callType === 'audio',
                        joinUrl: data.joinUrl || `join-room.php?room=${roomId}&group=${data.groupId}`
                    }));
                    
                    invitationsSent++;
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${clientId}`);
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${clientId}:`, err);
                    failedInvitations.push(clientId);
                }
            } else {
                console.log(`‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç ${clientId} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ`);
                failedInvitations.push(clientId);
            }
        });
        
        console.log(`üìä –ò—Ç–æ–≥–∏: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${invitationsSent} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${failedInvitations.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`);
        if (failedInvitations.length > 0) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ${failedInvitations.join(', ')}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ clients Map –Ω–∞–ø—Ä—è–º—É—é
        const initiatorWs = clients.get(initiatorId);
        if (initiatorWs && initiatorWs.readyState === WebSocket.OPEN) {
            try {
                initiatorWs.send(JSON.stringify({
                    type: 'group_call_initiated',
                    roomId: roomId,
                    groupId: data.groupId,
                    invitationsSent: invitationsSent
                }));
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É ${initiatorId}`);
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É ${initiatorId}:`, err);
            }
        } else {
            console.log(`‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä ${initiatorId} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫:', error);
    }
}

// ... existing code ...

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
function handleInitGroupCall(data) {
    console.log('üìû Processing group call initiation:', {
        groupId: data.groupId,
        initiator: data.initiator,
        participants: data.participants
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    const initiatorWs = clients.get(parseInt(data.initiator.id));
    if (initiatorWs) {
        initiatorWs.groupCall = data.groupId;
        initiatorWs.userInfo = data.initiator;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if (Array.isArray(data.participants)) {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        let notificationsSent = 0;
        const totalParticipants = data.participants.length;
        
        data.participants.forEach(participantId => {
            const currentParticipantId = parseInt(participantId);
            const initiatorId = parseInt(data.initiator.id);
            
            if (currentParticipantId === initiatorId) {
                console.log(`Skipping notification for initiator: ${initiatorId}`);
                return;
            }

            const participantWs = clients.get(currentParticipantId);
            if (participantWs && participantWs.readyState === WebSocket.OPEN) {
                console.log(`üì® Sending call notification to participant: ${currentParticipantId}`);
                participantWs.send(JSON.stringify({
                    type: 'incomingGroupCall',
                    groupId: data.groupId,
                    groupName: data.groupName,
                    initiator: data.initiator
                }));
                notificationsSent++;
            } else {
                console.log(`‚ö†Ô∏è Participant ${currentParticipantId} is not connected`);
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (initiatorWs && initiatorWs.readyState === WebSocket.OPEN) {
            initiatorWs.send(JSON.stringify({
                type: 'callNotificationStatus',
                sent: notificationsSent,
                total: totalParticipants - 1, // –ò—Å–∫–ª—é—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                groupId: data.groupId
            }));
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–≤–æ–Ω–∫—É
function handleJoinGroupCall(data) {
    console.log('üìû Processing join group call:', {
        groupId: data.groupId,
        userId: data.userId,
        userInfo: data.userInfo
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞
    const activeParticipants = [];
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    clients.forEach((ws, clientId) => {
        if (ws.groupCall === data.groupId && ws.userInfo) {
            activeParticipants.push(ws.userInfo);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const joiningWs = clients.get(parseInt(data.userId));
    if (joiningWs) {
        joiningWs.groupCall = data.groupId;
        joiningWs.userInfo = data.userInfo;
        
        if (!activeParticipants.some(p => p.id === data.userInfo.id)) {
            activeParticipants.push(data.userInfo);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º participantJoined –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        activeParticipants.forEach(participant => {
            if (participant.id !== data.userId) {
                const participantWs = clients.get(parseInt(participant.id));
                if (participantWs && participantWs.readyState === WebSocket.OPEN) {
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–æ–≤–æ–º
                    participantWs.send(JSON.stringify({
                        type: 'participantJoined',
                        groupId: data.groupId,
                        userInfo: data.userInfo
                    }));

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º
                    joiningWs.send(JSON.stringify({
                        type: 'participantJoined',
                        groupId: data.groupId,
                        userInfo: participant
                    }));
                }
            }
        });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    clients.forEach((ws, clientId) => {
        if (ws.groupCall === data.groupId && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'callParticipantsUpdate',
                groupId: data.groupId,
                participants: activeParticipants
            }));
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
function handleLeaveGroupCall(data) {
    console.log('üìû Processing leave group call:', {
        groupId: data.groupId,
        userId: data.userId
    });
    
    const leavingUserId = parseInt(data.userId);
    const leavingUserWs = clients.get(leavingUserId);
    
    if (leavingUserWs) {
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        leavingUserWs.groupCall = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const remainingParticipants = [];
    clients.forEach((ws, clientId) => {
        if (ws.groupCall === data.groupId && ws.userInfo && clientId !== leavingUserId) {
            remainingParticipants.push(ws.userInfo);
        }
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    clients.forEach((ws, clientId) => {
        if (ws.groupCall === data.groupId && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'participantLeft',
                groupId: data.groupId,
                userId: leavingUserId,
                participants: remainingParticipants
            }));
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
function handleDeclineGroupCall(data) {
    console.log('üìû Processing decline group call:', {
        groupId: data.groupId,
        userId: data.userId,
        initiatorId: data.initiatorId
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∑–≤–æ–Ω–∫–∞
    const initiatorWs = clients.get(parseInt(data.initiatorId));
    if (initiatorWs && initiatorWs.readyState === WebSocket.OPEN) {
        initiatorWs.send(JSON.stringify({
            type: 'callDeclined',
            groupId: data.groupId,
            userId: data.userId
        }));
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleInitGroupVideoCall(data) {
    console.log('üìû Processing group video call initiation:', {
        groupId: data.groupId,
        initiator: data.initiator,
        participants: data.participants
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    const videoInitiatorWs = clients.get(parseInt(data.initiator.id));
    if (videoInitiatorWs) {
        videoInitiatorWs.groupVideoCall = data.groupId;
        videoInitiatorWs.userInfo = data.initiator;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if (Array.isArray(data.participants)) {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        let videoNotificationsSent = 0;
        const totalVideoParticipants = data.participants.length;
        
        data.participants.forEach(participantId => {
            const currentParticipantId = parseInt(participantId);
            const initiatorId = parseInt(data.initiator.id);
            
            if (currentParticipantId === initiatorId) {
                console.log(`Skipping video call notification for initiator: ${initiatorId}`);
                return;
            }

            const participantWs = clients.get(currentParticipantId);
            if (participantWs && participantWs.readyState === WebSocket.OPEN) {
                console.log(`üì® Sending video call notification to participant: ${currentParticipantId}`);
                participantWs.send(JSON.stringify({
                    type: 'incomingGroupVideoCall',
                    groupId: data.groupId,
                    groupName: data.groupName,
                    initiator: data.initiator
                }));
                videoNotificationsSent++;
            } else {
                console.log(`‚ö†Ô∏è Participant ${currentParticipantId} is not connected for video call`);
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (videoInitiatorWs && videoInitiatorWs.readyState === WebSocket.OPEN) {
            videoInitiatorWs.send(JSON.stringify({
                type: 'videoCallNotificationStatus',
                sent: videoNotificationsSent,
                total: totalVideoParticipants - 1, // –ò—Å–∫–ª—é—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                groupId: data.groupId
            }));
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
function handleLeaveGroupVideoCall(data) {
    console.log('üìû Processing leave group video call:', {
        groupId: data.groupId,
        userId: data.userId
    });
    
    const leavingVideoUserId = parseInt(data.userId);
    const leavingVideoUserWs = clients.get(leavingVideoUserId);
    
    if (leavingVideoUserWs) {
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        leavingVideoUserWs.groupVideoCall = null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const remainingVideoParticipants = [];
    clients.forEach((ws, clientId) => {
        if (ws.groupVideoCall === data.groupId && ws.userInfo && clientId !== leavingVideoUserId) {
            remainingVideoParticipants.push(ws.userInfo);
        }
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    clients.forEach((ws, clientId) => {
        if (ws.groupVideoCall === data.groupId && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'videoParticipantLeft',
                groupId: data.groupId,
                userId: leavingVideoUserId,
                participants: remainingVideoParticipants
            }));
        }
    });
}

// ... existing code ...
